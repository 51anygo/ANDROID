package com.anygo;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import org.json.JSONArray;
import org.json.JSONObject;

import com.anygo.R;
import com.common.NetworkTool;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Window;
import android.widget.TextView;
import android.widget.Toast;

public class UpdateActivity extends Activity {
        private static final String TAG = "Update";
        static final int PROGRESS_DIALOG = 0;  
        public ProgressDialog pBar;
        ProgressThread progressThread;  
        TextView tv;
        ProgressDialog progressDialog;  
        private int newVerCode = 0;
        private int size = 1;  
        private int hasRead = 0;  
        private int len = 0;  
        private String newVerName = "";
        //程序运行时检查，则只在能升级时提示
        private boolean bootcheckupdate = true;
        private String url= "";
        private int index = 0;  
        private Message message = null;  
        int   fileSize;
    	int   downLoadFileSize;
    	String fileEx,fileNa,filename;
        @Override
        protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                setContentView(R.layout.update);
                tv=(TextView)findViewById(R.id.tv);   
                Intent intent;
                intent=this.getIntent();               
                Bundle bunde = intent.getExtras();
        		if(bunde!=null)
        		{
        			bootcheckupdate = bunde.getBoolean("bootcheckupdate");
        		}        			
                if (getServerVerCode()) {
                        int vercode = Config.getVerCode(this);
                        if (newVerCode > vercode) {
                                doNewVersionUpdate();
                        } else {
                        	if(!bootcheckupdate){
                                notNewVersionShow();
	                        	}
	                        	else
	                        	{
	                        		this.finish();
	                    	    }
                        }
                      }
        }

        private boolean getServerVerCode() {
                try {
                        String verjson = NetworkTool.getContent(Config.UPDATE_SERVER
                                        + Config.UPDATE_VERJSON);
                        JSONArray array = new JSONArray(verjson);
                        if (array.length() > 0) {
                                JSONObject obj = array.getJSONObject(0);
                                try {
                                        newVerCode = Integer.parseInt(obj.getString("verCode"));
                                        newVerName = obj.getString("verName");
                                } catch (Exception e) {
                                        newVerCode = -1;
                                        newVerName = "";
                                        return false;
                                }
                        }
                } catch (Exception e) {
                        Log.e(TAG, e.getMessage());
                        return false;
                }
                return true;
        }

        private void notNewVersionShow() {
                int verCode = Config.getVerCode(this);
                String verName = Config.getVerName(this);
                StringBuffer sb = new StringBuffer();
                sb.append("当前版本:");
                sb.append(verName);
                //sb.append(" Code:");
                //sb.append(verCode);
                sb.append(",\n已是最新版,无需更新!");
                Dialog dialog = new AlertDialog.Builder(UpdateActivity.this)
                                .setTitle("软件更新").setMessage(sb.toString())// 设置内容
                                .setPositiveButton("确定",// 设置确定按钮
                                                new DialogInterface.OnClickListener() {

                                                        @Override
                                                        public void onClick(DialogInterface dialog,
                                                                        int which) {
                                                                finish();
                                                        }

                                                }).create();// 创建
                // 显示对话框
                dialog.show();
        }

        private void doNewVersionUpdate() {
                int verCode = Config.getVerCode(this);
                String verName = Config.getVerName(this);
                StringBuffer sb = new StringBuffer();
                sb.append("当前版本:");
                sb.append(verName);
                //sb.append(" Code:");
                //sb.append(verCode);
                sb.append(", 发现新版本:");
                sb.append(newVerName);
                //sb.append(" Code:");
                //sb.append(newVerCode);
                sb.append(", 是否更新?");
                Dialog dialog = new AlertDialog.Builder(UpdateActivity.this)
                                .setTitle("软件更新")
                                .setMessage(sb.toString())
                                // 设置内容
                                .setPositiveButton("更新",// 设置确定按钮
                                new DialogInterface.OnClickListener() {

                                        @Override
                                        public void onClick(DialogInterface dialog,
                                                        int which) {
                                               // pBar = new ProgressDialog(UpdateActivity.this);
                                               // pBar.setTitle("正在下载");
                                               // pBar.setMessage("请稍候...");
                                               // pBar.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
                                                downFile(Config.UPDATE_SERVER
                                                                + Config.UPDATE_APKNAME);
                                        }

                                })
                                .setNegativeButton("暂不更新",
                                                new DialogInterface.OnClickListener() {
                                                        public void onClick(DialogInterface dialog,
                                                                        int whichButton) {
                                                                // 点击"取消"按钮之后退出程序
                                                                finish();
                                                        }
                                                }).create();// 创建
                // 显示对话框
                dialog.show();
        }

        void downFile(final String urlstr) {
              url = urlstr;
        	  showDialog(PROGRESS_DIALOG);  
        }

        void down() {
                handler.post(new Runnable() {
                        public void run() {
                                //pBar.cancel();
                                update();
                        }
                });

        }

        void update() {

                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setDataAndType(Uri.fromFile(new File(Environment
                                .getExternalStorageDirectory(), Config.UPDATE_SAVENAME)),
                                "application/vnd.android.package-archive");
                startActivity(intent);
        }
        
        protected Dialog onCreateDialog(int id) {  
            switch(id) {  
            case PROGRESS_DIALOG:  
                progressDialog = new ProgressDialog(UpdateActivity.this);  
                progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL); 
                progressDialog.setMax(100); 
                progressDialog.setMessage("正在下载...");                 
                progressDialog.setIndeterminate(false);  
                progressDialog.setCancelable(true);  
                progressDialog.show();  

                progressThread = new ProgressThread(handler);  
                progressThread.start();  
                return progressDialog;  
            default:  
                return null;  
            }  
        }   
  
        private Handler handler = new Handler()
  	   {
  	    @Override
  	    public void handleMessage(Message msg)
  	    {//定义一个Handler，用于处理下载线程与UI间通讯
  	      if (!Thread.currentThread().isInterrupted())
  	      {
  	        switch (msg.what)
  	        {
  	          case 0:
  	        	progressDialog.setMax(fileSize);
  	          case 1:
  	        	progressDialog.setProgress(downLoadFileSize);
  	            int result = downLoadFileSize * 100 / fileSize;
  	            tv.setText(result + "%");
  	            break;
  	          case 2:
  	            Toast.makeText(UpdateActivity.this, "文件下载完成", 1).show();
  	            dismissDialog(PROGRESS_DIALOG);  
                progressThread.setState(ProgressThread.STATE_DONE); 
                tv.setText("");
                down();
  	            break;
   
  	          case -1:
  	            String error = msg.getData().getString("error");
  	            Toast.makeText(UpdateActivity.this, error, 1).show();
  	            dismissDialog(PROGRESS_DIALOG);  
                progressThread.setState(ProgressThread.STATE_DONE); 
                tv.setText("");
  	            break;
  	        }
  	      }
  	      super.handleMessage(msg);
  	    }
  	  };

        
        /** Nested class that performs progress calculations (counting) */  
        private class ProgressThread extends Thread {  
            Handler mHandler;  
            final static int STATE_DONE = 0;  
            final static int STATE_RUNNING = 1;  
            int mState;  
            int total;  
            ProgressThread(Handler h) {  
                mHandler = h;  
            }  
            public void run() {  
        	    mState = STATE_RUNNING;  
                try {
					down_file(url,Environment.getExternalStorageDirectory()+"//"+
					                Config.UPDATE_SAVENAME);
				} catch (IOException e) {
					// TODO Auto-generated catch block
				    sendMsg(-1);//报错
					e.printStackTrace();
				}
            }
            /* sets the current state for the thread, 
             * used to stop the thread */  
            public void setState(int state) {  
                mState = state;  
            }  
        }
        
        public void down_file(String url,String path) throws IOException{
        	//下载函数   	
        	filename=url.substring(url.lastIndexOf("/") + 1);
        	//获取文件名
        	URL myURL = new URL(url);
        	URLConnection conn = myURL.openConnection();
        	conn.connect();
        	InputStream is = conn.getInputStream();
    	    this.fileSize = conn.getContentLength();//根据响应获取文件大小
    	    if (this.fileSize <= 0) throw new RuntimeException("无法获知文件大小 ");
    	    if (is == null) throw new RuntimeException("stream is null");
    	    FileOutputStream fos = new FileOutputStream(path);
    	    //把数据存入路径+文件名
    	    byte buf[] = new byte[fileSize];
    	    downLoadFileSize = 0;
    	    sendMsg(0);
    	    do
    	      {
    	    	//循环读取
    	        int numread = is.read(buf);
    	        if (numread == -1)
    	        {
    	          break;
    	        }
    	        fos.write(buf, 0, numread);
    	        downLoadFileSize += numread;
     
    	        sendMsg(1);//更新进度条
    	      } while (true);
    	    sendMsg(2);//通知下载完成
    	    try
    	      {
    	        is.close();
    	      } catch (Exception ex)
    	      {
    	        Log.e("tag", "error: " + ex.getMessage(), ex);
    	      }
     
        }
    	private void sendMsg(int flag)
    	{
    	    Message msg = new Message();
    	    msg.what = flag;
    	    handler.sendMessage(msg);
    	}
   
}